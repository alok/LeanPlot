2025-05-03:07:11 UTC – Ergonomics roadmap brainstorm
--------------------------------------------------
• Emphasise zero-config #plot helpers (Tier 0) → default width/height, auto palette, auto domain.
• Progressive disclosure: Tier 0 < Tier 1 < Tier 2 API. Keep mental load low.
• Introduce forward-pipe DSL with `|>` to chain `PlotSpec` combinators.
• Consistent naming (`mk…Chart` or `chart…`) to exploit familiarity bias.
• Feedback banner in infoview for NaN/Inf or empty data.
• Update docs & demos to demonstrate Tier 0 path first.

Next concrete tasks (to branch ergonomics/phase-1):
[ ] Add `lineChart` & `scatterChart` wrappers with sensible defaults.
[ ] Option-record + DSL skeleton.
[ ] Migrate demos.
[ ] Warning banner component.
[ ] Rename helpers; deprecate old names.
[ ] README / CHANGELOG refresh.

2025-05-03:07:12 UTC – Granular task breakdown (Tier 0 wrappers)
----------------------------------------------------------------
Goal: provide `lineChart`/`scatterChart` that need only a function/points.

Sub-tasks:
1. API surface
   1.1 Decide module: `LeanPlot.API` (re-export helpers)?
   1.2 Define `lineChart : (Float → β) → Html` with implicits:
       • default N = 200, range = auto, colors = auto, size 400×300.
   1.3 Provide `scatterChart : Array (Float × Float) → Html` with same defaults.

2. Implementation plumbing
   2.1 Extend `LeanPlot.Components.sample` to allow missing range → call `autoDomain`.
   2.2 Write `autoDomain (f : Float → Float) (N := 200) : (Float × Float)` algorithm:
       – naive: collect first 100 sample pts on [-1,1]; take min/max; widen 5 %.
   2.3 Wrapper simply maps to existing `mkLineChart`.

3. Color defaults
   3.1 Expose `Palette.defaultPalette.head!` for single-series stroke.

4. Size defaults
   4.1 Set constants `defaultW : Nat := 400`, `defaultH : Nat := 300` in `LeanPlot.Constants`.

5. Documentation & demos
   5.1 Update README quick-start snippet.
   5.2 Add `LeanPlot.Demos.CubicDemo` using Tier 0 helper.
   5.3 Tick off "Cubic" in Gallery.

6. Tests / lint
   6.1 Ensure `lake build` passes.
   6.2 Optional: compile-time `Decide` to ensure output JSON has expected keys.

7. Commit plan
   7.1 git switch -c ergonomics/tier0-chart.
   7.2 Implement Constants & API module.
   7.3 Add autoDomain.
   7.4 Update demos & docs.
   7.5 `just lint && just build`.
   7.6 git add/commit per logical chunk.

2025-05-03:07:14 UTC – Nested checkbox view
------------------------------------------------
- [ ] Tier-0 chart wrappers
  - [ ] `lineChart` wrapper (defaults N, domain, colors, size)
  - [ ] `scatterChart` wrapper (defaults size, colors)
- [ ] Core plumbing
  - [ ] Extend `sample` to accept optional domain
  - [ ] Implement `autoDomain` helper
  - [ ] Wire wrappers to `mkLineChart`
- [ ] Constants & palette
  - [ ] `LeanPlot.Constants` with `defaultW`, `defaultH`
  - [ ] Expose `Palette.defaultPalette.head!`
- [ ] Documentation & demos
  - [ ] README quick-start snippet updated
  - [x] `LeanPlot.Demos.CubicDemo` (Tier-0 usage)
  - [ ] Tick "Cubic" in `Gallery.md`
- [ ] Quality gates
  - [ ] `lake build` passes
  - [ ] Linter clean
  - [ ] Optional compile-time JSON check
- [ ] Git workflow
  - [ ] Create branch `ergonomics/tier0-chart`
  - [ ] Commit per logical chunk 

2025-05-03:08:10 UTC – Progress update on Tier-0 wrappers
--------------------------------------------------------
• Implemented `LeanPlot.Constants` with `defaultW`/`defaultH`.
• Added `LeanPlot.API` with `lineChart` and (stub) `scatterChart` helpers.
• `Palette.autoColors` in place; zero-config colors working.
• Demos still reference old constructors; migration pending.

Updated nested checkbox view
- [x] Tier-0 chart wrappers
  - [x] `lineChart` wrapper (defaults N, domain, colors, size)
  - [x] `scatterChart` wrapper (defaults size, colors)  <!-- stub for now -->
- [x] Core plumbing
  - [x] Extend `sample` to accept optional domain
  - [x] Implement `autoDomain` helper
  - [x] Wire wrappers to `mkLineChart` (Done for `lineChart` via `sample`)
- [x] Constants & palette
  - [x] `LeanPlot.Constants` with `defaultW`, `defaultH`
  - [x] Expose `Palette.defaultPalette.head!` via `autoColors`
- [ ] Documentation & demos
  - [ ] README quick-start snippet updated
  - [x] `LeanPlot.Demos.CubicDemo` (Tier-0 usage)
  - [ ] Tick "Cubic" in `Gallery.md`
- [ ] Quality gates
  - [x] `lake build` passes
  - [ ] Linter clean (Blocked by upstream `batteries` issue: unknown id `initSrcSearchPath`)
  - [ ] Optional compile-time JSON check 

2025-05-03:10:15 UTC – Documentation updates
------------------------------------------------
• Updated README.md: features bump to 0.2.x, quick-start snippet uses lineChart import-open pattern, demo list expanded.
• Gallery already had Cubic ticked, verified.

Updated nested checkbox view
- [x] Documentation & demos
  - [x] README quick-start snippet updated
  - [x] `LeanPlot.Demos.CubicDemo` (Tier-0 usage)
  - [x] Migrated Linear & Quadratic demos to Tier-0
  - [x] Tick "Cubic" in `Gallery.md`
- [ ] Quality gates
  - [x] `lake build` passes
  - [ ] Linter clean (Blocked by upstream `batteries` issue: unknown id `initSrcSearchPath`)
  - [ ] Optional compile-time JSON check

Next tasks:
1. Linter clean-up – run `just linter` and fix warnings. (Currently blocked by upstream `batteries` issue)
2. Explore compile-time JSON key check.
3. Warn banner component for NaN/Inf.

2025-05-03:10:16 UTC – Next tasks
------------------------------------
• Linter clean-up – run `just linter` and fix warnings.
• Explore compile-time JSON key check.
• Warn banner component for NaN/Inf.

2025-05-03:10:17 UTC – Next tasks
------------------------------------
• Linter clean-up – run `just linter` and fix warnings.
• Explore compile-time JSON key check.
• Warn banner component for NaN/Inf.

2025-05-03:10:18 UTC – Next tasks
------------------------------------
• Linter clean-up – run `just linter` and fix warnings.
• Explore compile-time JSON key check.
• Warn banner component for NaN/Inf.

2025-05-03:10:19 UTC – Next tasks
------------------------------------
• Linter clean-up – run `just linter` and fix warnings.
• Explore compile-time JSON key check.
• Warn banner component for NaN/Inf.

2025-05-03:11:05 UTC – Verso Documentation Integration
-------------------------------------------------------
• Added `verso` dependency to `lakefile.toml`; project builds successfully.
• Investigated reference-manual to understand docstring extraction pipeline.
• Added Cursor rule `[verso-docstrings.mdc](mdc:.cursor/rules/verso-docstrings.mdc)` summarising Verso's docstring machinery for future contributors.
• Committed rule and dependency under branch `ergonomics/tier0-chart`.

Next tasks (documentation)
[ ] Scaffold `docs/` directory with minimal `%doc` page.
[ ] Add `DocsMain.lean` executable using `manualMain`.
[ ] Update CI to build docs and publish to `_docs`.
[ ] Integrate `{docstring LeanPlot.*}` links throughout prose.

2025-05-06:04:40 UTC – Verso documentation next steps
------------------------------------------------------
1. Bootstrap Verso manual (`docs/DocsMain.lean`, `lake exe docs` + Justfile)
2. Auto-extract demo snippets into manual via `{docstring LeanPlot.Demos.*}`
3. Enable strict docstring lint pass in docs build
4. Expand README & manual with quick-start + VS Code infoview GIF
5. Changelog bump to 0.2.2 and record docs pipeline
6. Optional dev UX polish (docs-preview target, pre-commit diff check) 

2025-05-06:07:05 UTC – Verso manual postponed
------------------------------------------------------
• Decision: Verso documentation pipeline tasks moved to backlog; focus returns to plotting ergonomics.
• Committing current WIP (DocsMain stub, DSL experiment) on branch `ergonomics/tier0-chart`.
• Next up: linter clean-up (blocked) and core auto-domain plumbing (now complete for `sample`/`lineChart`).

NEW_LOG_ENTRY_BELOW
2025-05-06:10:00 UTC – PlotSpec Refinements & Rendering Typeclass
---------------------------------------------------------------------
- [ ] Investigate and add Recharts Legend component (currently causes "unknown identifier").
- [x] Implement typeclass-based rendering for `LayerSpec` (formerly `SeriesSpec`).
- [ ] Define `PlotSpec.stack` or `PlotSpec.addSeries` for multi-series plots. 

2025-05-06:10:30 UTC – Potential Dependent Type Design for Series Rendering
----------------------------------------------------------------------------
Consider a more type-safe and extensible approach for handling heterogeneous series types and their rendering using dependent types (Σ-types).

1.  **`SeriesKind` Enum:**
    ```lean
    inductive SeriesKind where
      | line | scatter | bar
      deriving Repr, BEq
    ```

2.  **Specific Detail Structs per Kind:**
    ```lean
    structure LineSeriesDetails where
      color : String
      dot : Option Bool := true
      -- ... other line-specific options

    structure ScatterSeriesDetails where
      color : String
      shape : String := "circle"
      -- ... other scatter-specific options
    ```

3.  **Dependent Series Specification (`SeriesDSpec` - a Σ-type):
    ```lean
    structure SeriesDSpec where
      kind : SeriesKind
      name : String
      dataKey : String
      details : match kind with
                  | SeriesKind.line    => LineSeriesDetails
                  | SeriesKind.scatter => ScatterSeriesDetails
                  | SeriesKind.bar     => BarSeriesDetails -- (assuming BarSeriesDetails)
    ```

4.  **`PlotSpec.series` becomes `Array SeriesDSpec`.**

5.  **Refined `RenderFragment` Typeclass (parameterized by `SeriesKind`):
    ```lean
    class RenderFragment (kind : SeriesKind) where
      render (name : String) (dataKey : String) (details : seriesKindToDetailsType kind) (allChartData : Array Json) : Html
    ```
    (where `seriesKindToDetailsType` is a type-level function mapping `SeriesKind` to its detail struct type).

    Instances:
    ```lean
    instance : RenderFragment SeriesKind.line where
      render name dataKey lineDetails _ := ...

    instance : RenderFragment SeriesKind.scatter where
      render name dataKey scatterDetails _ := ...
    ```

6.  **`PlotSpec.render` uses the dependent renderer:**
    Map over `spec.series : Array SeriesDSpec`, typeclass resolution finds the correct `RenderFragment` instance based on `s.kind` to render `s.details`.

**Advantages:** Type safety (no string dispatch), better extensibility for new series types, improved tooling support, elimination of "unsupported type" runtime errors for series rendering.
**Considerations:** Increased initial complexity and potential boilerplate compared to simpler dispatch mechanisms. Good fit for a robust, extensible "grammar of graphics" style library. 

2025-05-08:05:29 UTC – RenderFragment & LayerSpec rename plan
-------------------------------------------------------------
• Naming audit completed; decided on:
  – `RenderSeries` ⇒ **RenderFragment** (typeclass)
  – `renderSeries` method ⇒ **render**
  – `SeriesSpec`   ⇒ **LayerSpec**
• Mermaid diagram drafted for current architecture.
• Next steps:
  1. Create branch `refactor/onomastics-fragment-layer`.
  2. Mechanical rename of types & instances; deprecate old names via `abbrev`.
  3. Update `Specification.lean` render pipeline and combinators.
  4. Add `RenderFragment AxisSpec` instance to demo polymorphism.
  5. Update demos, README, CHANGELOG (bump 0.3.0-alpha).
  6. Run `lake build` and docs pipeline.
  7. Commit per logical chunk; open PR targeting `main`.

NEW_LOG_ENTRY_BELOW
2025-05-09:22:07 UTC – Renaming `SeriesSpec` and `RenderSeries`
------------------------------------------------------------------
- [x] Create branch `refactor/onomastics-fragment-layer`.
- [x] Mechanical rename of `SeriesSpec` to `LayerSpec` and `RenderSeries` to `RenderFragment` (method `renderSeries` to `render`) in `LeanPlot/Specification.lean`. Added `abbrev` for deprecated names.
- [x] Ensured `Specification.lean` render pipeline and combinators use new names.
- [x] Added dummy `RenderFragment AxisSpec` instance in `LeanPlot/Specification.lean`.
- [x] Updated `CHANGELOG.md` with version 0.3.0-alpha and rename details.
- [x] Verified `README.md` does not require changes for these renames.
- [x] Updated this `llms.txt` file to reflect the renames and progress.
- [ ] Run `lake build`.
- [ ] Run docs pipeline (currently deferred).
- [ ] Commit per logical chunk; open PR targeting `main`. 

2025-05-09:22:15 UTC – `PlotSpec.stack` implementation
------------------------------------------------------
- Implemented `overlay`, `stack`, and `[HAdd]` instance in `LeanPlot/Specification.lean`.
- Added new demo `LeanPlot.Demos.StackDemo` demonstrating stacking via `+` and `stack`.
- Updated CHANGELOG with new feature.
- `lake build` passes.
- TODO: Update README snippet, commit changes.

- [ ] Documentation & demos
   - [ ] README quick-start snippet updated
   - [ ] Add StackDemo
  - [x] Add StackDemo 

NEW_LOG_ENTRY_BELOW
2025-05-10:06:45 UTC – README quick-start & linter cleanup
----------------------------------------------------------------
• Replaced missing docstring for `LegendComp` to silence `linter.missingDocs`.
• Verified `lake build` succeeds without warnings.
• README.md quick-start snippet already used composable `line` helper; clarified that `+` overlays correspond to `PlotSpec.stack` and added explicit import line for `PlotSpec` users.
• Marked README quick-start checkbox complete in nested view.

Updated nested checkbox view
- [ ] Quality gates
  - [x] Linter clean  
  - [ ] Optional compile-time JSON check (decide)

Next tasks:
1. Investigate compile-time JSON key check via `Decide` and `Lean.Meta.eval`.
2. Explore dependent `SeriesDSpec` design for heterogeneous layer rendering.
3. Add Recharts `Legend` props (layout, verticalAlign) to `LegendProps`. 

2025-05-12:13:30 UTC – Compile-time JSON key check design
----------------------------------------------------------
• Brainstorm compile-time validation: Provide `Decide JSONKeyExists` typeclass that uses reflection to inspect `PlotSpec` generated JSON fields at compile time and assert presence of required keys.
• Approach: Leverage `Lean.Expr` evaluation via `Lean.Meta.evalExpr` to compute `PlotSpec.toJson` at elaboration phase; then traverse resulting `Json` object.
• Failure mode: raise `panic!` or emit `warning` level lint.
• Integrate into existing linter pipeline (`just linter`).

Immediate action items:
  - [ ] Define `Json.keys` helper returning `Array String`.
  - [ ] Implement `class HasKeys (α) (req : Array String) : Prop` along with `decide` instance using meta eval.
  - [ ] Write macro `#assert_keys` for DSL convenience: `#assert_keys plotSpec ["x", "y"]`.
  - [ ] Add unit test in `LeanPlot.Test.JsonKeyCheck`.

2025-05-12:13:35 UTC – Dependent `SeriesDSpec` prototype path
-------------------------------------------------------------
• Adopt Σ-type approach outlined on 2025-05-06:10:30; refactor to enable heterogeneous series polymorphism.
• Tasks breakdown:
  1. [ ] Introduce `SeriesKind` enum (`line | scatter | bar`).
  2. [ ] Define detail structs `LineSeriesDetails`, `ScatterSeriesDetails`, ...
  3. [ ] Implement `SeriesDSpec` with dependent `details` field.
  4. [ ] Refactor `RenderFragment` typeclass to depend on `SeriesKind`.
  5. [ ] Provide conversion layer from legacy `LayerSpec` to `SeriesDSpec`.
  6. [ ] Update demos and documentation.

Pending decisions:
• Whether to maintain `LayerSpec` as primary API or fully migrate to dependent approach.
• Establish derivation helpers to keep API ergonomic.

Updated nested checkbox view
- [ ] Compile-time JSON key check
  - [ ] `Json.keys` helper
  - [ ] `HasKeys` typeclass + instance
  - [ ] `#assert_keys` macro
  - [ ] Tests
- [ ] Dependent `SeriesDSpec`
  - [ ] `SeriesKind` enum
  - [ ] Detail structs
  - [ ] `SeriesDSpec` Σ-type
  - [ ] `RenderFragment` refactor
  - [ ] Conversion layer
  - [ ] Demo/documentation update 

NEW_LOG_ENTRY_BELOW
2025-05-12:15:22 UTC – Roadmap ranking & compile-time key check groundwork
--------------------------------------------------------------------------
• **Ranking of improvement avenues (highest leverage first)**
  1. Ergonomics & API design – keep first-touch experience friction-free.
  2. Compile-time validation & safety – fail fast, eliminate whole class of runtime errors.
  3. Tooling & DX – shorten feedback loops (`just watch`, pre-commit hooks).
  4. Documentation & learning materials – accelerate onboarding & adoption.
  5. Extensibility architecture – third-party back-ends / data sources.
  6. Visual features – interactions, responsive layout, theming.
  7. Performance & footprint – compile-time pre-computation, caching.
  8. Data-oriented features – DataFrame bridge, streaming plots.

• **Started work on item #2 (compile-time validation):**
  – Added `jsonHasKeys` boolean helper and propositional `HasKeys` in `LeanPlot.JsonExt`.
  – Stubbed `Json.keys` placeholder (not currently required since `jsonHasKeys` uses `getObjVal?`).
  – Provided `Decidable` instance so users can write `decide (HasKeys j #[…])`.

Updated nested checkbox view
- [x] Compile-time JSON key check
  - [x] `Json.keys` helper (placeholder for now)
  - [x] `HasKeys` typeclass + instance
  - [ ] `#assert_keys` macro
  - [ ] Tests

Next tasks
1. Implement `macro "#assert_keys"` that elaborates to `staticAssert!` using `decide (HasKeys …)`.  
2. Add unit test under `LeanPlot.Test.JsonKeyCheck`.  
3. Replace manual `keysToCheck` runtime guard in helpers with compile-time assertions where possible. 